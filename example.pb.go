// Code generated by protoc-gen-go. DO NOT EDIT.
// source: example.proto

package grpc_benchmark

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BulkMessage struct {
	Message              []*Message `protobuf:"bytes,1,rep,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *BulkMessage) Reset()         { *m = BulkMessage{} }
func (m *BulkMessage) String() string { return proto.CompactTextString(m) }
func (*BulkMessage) ProtoMessage()    {}
func (*BulkMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{0}
}

func (m *BulkMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BulkMessage.Unmarshal(m, b)
}
func (m *BulkMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BulkMessage.Marshal(b, m, deterministic)
}
func (m *BulkMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BulkMessage.Merge(m, src)
}
func (m *BulkMessage) XXX_Size() int {
	return xxx_messageInfo_BulkMessage.Size(m)
}
func (m *BulkMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BulkMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BulkMessage proto.InternalMessageInfo

func (m *BulkMessage) GetMessage() []*Message {
	if m != nil {
		return m.Message
	}
	return nil
}

type Message struct {
	Bytes                []byte   `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{1}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

func init() {
	proto.RegisterType((*BulkMessage)(nil), "BulkMessage")
	proto.RegisterType((*Message)(nil), "Message")
}

func init() { proto.RegisterFile("example.proto", fileDescriptor_15a1dc8d40dadaa6) }

var fileDescriptor_15a1dc8d40dadaa6 = []byte{
	// 192 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xad, 0x48, 0xcc,
	0x2d, 0xc8, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x97, 0x92, 0x4e, 0xcf, 0xcf, 0x4f, 0xcf,
	0x49, 0xd5, 0x07, 0xf3, 0x92, 0x4a, 0xd3, 0xf4, 0x53, 0x73, 0x0b, 0x4a, 0x2a, 0x21, 0x92, 0x4a,
	0x86, 0x5c, 0xdc, 0x4e, 0xa5, 0x39, 0xd9, 0xbe, 0xa9, 0xc5, 0xc5, 0x89, 0xe9, 0xa9, 0x42, 0x4a,
	0x5c, 0xec, 0xb9, 0x10, 0xa6, 0x04, 0xa3, 0x02, 0xb3, 0x06, 0xb7, 0x11, 0x87, 0x1e, 0x54, 0x2a,
	0x08, 0x26, 0xa1, 0x24, 0xcf, 0xc5, 0x0e, 0x53, 0x2e, 0xc2, 0xc5, 0x9a, 0x54, 0x59, 0x92, 0x5a,
	0x2c, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x13, 0x04, 0xe1, 0x18, 0x65, 0x71, 0xb1, 0x84, 0xa4, 0x16,
	0x97, 0x08, 0x99, 0x70, 0x71, 0x81, 0xcc, 0x0e, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0x15, 0xe2, 0xd1,
	0x43, 0xb2, 0x48, 0x4a, 0x4c, 0x0f, 0xe2, 0x2a, 0x3d, 0x98, 0xab, 0xf4, 0x5c, 0x41, 0xae, 0xd2,
	0x60, 0x14, 0xd2, 0xe1, 0x62, 0x83, 0xea, 0x80, 0xdb, 0x8d, 0x5b, 0xb5, 0x93, 0x40, 0x14, 0x5f,
	0x7a, 0x51, 0x41, 0x72, 0x7c, 0x52, 0x6a, 0x5e, 0x72, 0x46, 0x6e, 0x62, 0x51, 0x76, 0x12, 0x1b,
	0x58, 0x8d, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xfa, 0xe3, 0x89, 0x02, 0x06, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestClient is the client API for Test service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestClient interface {
	BulkStream(ctx context.Context, opts ...grpc.CallOption) (Test_BulkStreamClient, error)
	Stream(ctx context.Context, opts ...grpc.CallOption) (Test_StreamClient, error)
}

type testClient struct {
	cc *grpc.ClientConn
}

func NewTestClient(cc *grpc.ClientConn) TestClient {
	return &testClient{cc}
}

func (c *testClient) BulkStream(ctx context.Context, opts ...grpc.CallOption) (Test_BulkStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Test_serviceDesc.Streams[0], "/Test/BulkStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testBulkStreamClient{stream}
	return x, nil
}

type Test_BulkStreamClient interface {
	Send(*BulkMessage) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type testBulkStreamClient struct {
	grpc.ClientStream
}

func (x *testBulkStreamClient) Send(m *BulkMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testBulkStreamClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testClient) Stream(ctx context.Context, opts ...grpc.CallOption) (Test_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Test_serviceDesc.Streams[1], "/Test/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testStreamClient{stream}
	return x, nil
}

type Test_StreamClient interface {
	Send(*Message) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type testStreamClient struct {
	grpc.ClientStream
}

func (x *testStreamClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testStreamClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestServer is the server API for Test service.
type TestServer interface {
	BulkStream(Test_BulkStreamServer) error
	Stream(Test_StreamServer) error
}

// UnimplementedTestServer can be embedded to have forward compatible implementations.
type UnimplementedTestServer struct {
}

func (*UnimplementedTestServer) BulkStream(srv Test_BulkStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BulkStream not implemented")
}
func (*UnimplementedTestServer) Stream(srv Test_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}

func RegisterTestServer(s *grpc.Server, srv TestServer) {
	s.RegisterService(&_Test_serviceDesc, srv)
}

func _Test_BulkStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServer).BulkStream(&testBulkStreamServer{stream})
}

type Test_BulkStreamServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*BulkMessage, error)
	grpc.ServerStream
}

type testBulkStreamServer struct {
	grpc.ServerStream
}

func (x *testBulkStreamServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testBulkStreamServer) Recv() (*BulkMessage, error) {
	m := new(BulkMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Test_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServer).Stream(&testStreamServer{stream})
}

type Test_StreamServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type testStreamServer struct {
	grpc.ServerStream
}

func (x *testStreamServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testStreamServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Test_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Test",
	HandlerType: (*TestServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BulkStream",
			Handler:       _Test_BulkStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Stream",
			Handler:       _Test_Stream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "example.proto",
}
